name: Deploy Azure Web App

on:
  workflow_run:
    workflows: ["Build and Publish to Azure Container Registry"]
    types:
      - completed
    branches:
      - main

env:
  AZURE_REGISTRY: arturzure.azurecr.io
  IMAGE_NAME: azurewebapp
  AZURE_WEBAPP_NAME: ap-awareson-dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
- name: Azure Login
  uses: azure/login@v2
  with:
    client-id: ${{ secrets.AZURE_CLIENT_ID }}
    client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
    tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID 
        
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v2
      with:
        login-server: ${{ env.AZURE_REGISTRY }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
        
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ${{ env.AZURE_REGISTRY }}/${{ env.IMAGE_NAME }}:main
        
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        
    outputs:
      webapp-url: ${{ steps.deploy.outputs.webapp-url }}

  test:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}
    
    steps:
    - name: Wait for application startup
      run: |
        echo "Waiting for application to start..."
        sleep 30
        
    - name: Test Check Page Status
      run: |
        WEBAPP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        CHECK_URL="$WEBAPP_URL/Check"
        
        echo "Testing Check page endpoint: $CHECK_URL"
        
        # Wait for application to be ready and get response
        for i in {1..5}; do
          RESPONSE=$(curl -s --max-time 30 "$CHECK_URL" 2>/dev/null || echo "CONNECTION_FAILED")
          
          if [ "$RESPONSE" != "CONNECTION_FAILED" ]; then
            echo "‚úÖ Check page is responding"
            echo "Response received: $RESPONSE"
            
            # Check if response contains "failed" (case insensitive)
            if echo "$RESPONSE" | grep -qi "failed"; then
              echo "‚ùå Check page returned FAILED status - Stage: RED"
              exit 1
            else
              echo "‚úÖ Check page returned SUCCESS status - Stage: GREEN"
              exit 0
            fi
          else
            echo "‚è≥ Attempt $i: Check page not responding, waiting 30 seconds..."
            if [ $i -eq 5 ]; then
              echo "‚ùå Check page connection failed after 5 attempts - Stage: RED"
              exit 1
            fi
            sleep 30
          fi
        done
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "üöÄ Deployment Summary:"
        echo "- Web App: ${{ env.AZURE_WEBAPP_NAME }}"
        echo "- Image: ${{ env.AZURE_REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        echo "- URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "- Check Page: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/Check"
        echo "- Test Status: ${{ job.status }}"
